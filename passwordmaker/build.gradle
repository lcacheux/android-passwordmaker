// Top-level build file where you can add configuration options common to all sub-projects/modules.


/*
 * Gets the version name from the latest Git tag
 *
 * Tag each release like: git tag -a v1.0
 * then Rebuild for a nice version number
 *
 */
def generateVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    String output = stdout.toString()
    if (output.startsWith('v')) output = output[1..-1]
    output = output.trim()
    return output
}

def generateVersionCode = { ->
    def versions = generateVersionName().split("-", 4)
    def code = versions[0].replaceAll("-.*", "")
            .split("\\.").collect {
        it.padLeft(2, "0")
    }.join("")
    if ( versions.size() >= 2 && versions[1].isNumber() ) {
        // This is off of a release tag: '2.0.5' but has a couple of commits since: 2.0.5-4-g6af5805 we want the code to have '04' in this case.
        code += versions[1].padLeft(2, "0")
    } else if ( versions.size() >= 3 && versions[2].isNumber() ) {
        // This has a '-qualifier-##' e.g. '2.0.5-SNAPSHOT-1-g6af5805' we want the code to have '01' appended in this case.
        code += versions[2].padLeft(2, "0")
    } else if ( versions[-1] == "SNAPSHOT") {
        // The first snapshot
        code += "00"
    } else {
        // This is if we are on the release tag itself, lets force this to be the end of the revisions
        // example: '2.0.5' as the tag, we want to add 99 to the end, so that any revisions handed out during testing will be
        // less than this revision.
        code += "99"
    }
    return code.toInteger()
}

apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "org.passwordmaker.android"
        minSdkVersion 15 //2018-12-08: 99% of android users are using Sdk Version 15+.  Too lazy to deal with upgrading anyways.
        targetSdkVersion 28
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        versionCode generateVersionCode()
        versionName generateVersionName()
        println "Building version ${getVersionName()} (${getVersionCode()})"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    signingConfigs {
        release {
            def env = System.getenv()
            if (env['PASSWORDMAKER_KEYSTORE_FILE'] != null) {
                storeFile file(env['PASSWORDMAKER_KEYSTORE_FILE'])
                storePassword env['PASSWORDMAKER_KEYSTORE_PASSWORD']
                keyAlias env['PASSWORDMAKER_KEYSTORE_KEY_ALIAS']
                keyPassword env['PASSWORDMAKER_KEYSTORE_KEY_PASSWORD']
                println ("Using keystore file: ${file(env['PASSWORDMAKER_KEYSTORE_FILE'])}")
            } else {
                println ("##################")
                println ("No keystore for release set.")
                println ("Set PASSWORDMAKER_KEYSTORE_FILE, PASSWORDMAKER_KEYSTORE_PASSWORD,"
                        + "PASSWORDMAKER_KEYSTORE_KEY_ALIAS and PASSWORDMAKER_KEYSTORE_KEY_PASSWORD")
                println ("##################")
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // You must install or update the Support Repository through the SDK manager to use this dependency.
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.intellij:annotations:12.0@jar'
    implementation 'org.passwordmaker:passwordmaker-je-lib:0.9.9'
    implementation 'com.madgag.spongycastle:core:1.50.0.0'
    implementation 'com.madgag.spongycastle:prov:1.50.0.0'
    implementation 'com.google.guava:guava:27.0.1-android'
    testImplementation 'junit:junit:4.12'
}